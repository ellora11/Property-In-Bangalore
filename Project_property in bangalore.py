# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pQQYOgva6wdS6mke2wqidXmjW7sApj1p
"""

import pandas as pd

#import csv file
from google.colab import drive

#mount gdrive
drive.mount('/content/drive')
file_path = '/content/drive/My Drive/property_bangalore.csv'
df = pd.read_csv(file_path)
df = pd.read_csv(file_path, skiprows=1)
df.head()
print(df.info())



#keep information pertaining to city bangalore
df_b = df[df['Location'].str.contains('Bangalore', case=False, na=False)]
print(df_b.head())

missing_values = df_b.isnull().sum()
print(missing_values)
df_b['Area'] = df_b['Location'].apply(lambda x: x.split(',')[-2].strip() if len(x.split(',')) > 1 else '')
print(df_b)
#counting repeating areas
area_counts = df_b.groupby('Area').size().reset_index(name='Property Count')
area_counts = area_counts.sort_values(by='Property Count', ascending=False)
area_counts
#area with more than 5 listed properties
areas_with_more_than_5 = area_counts[area_counts['Property Count'] > 5]
print(areas_with_more_than_5)
#area with more than 50 listed properties
areas_with_more_than_50 = area_counts[area_counts['Property Count'] > 50]
print(areas_with_more_than_50)
df_b.count()
#area with more than 20 listed properties
areas_with_more_than_20 = area_counts[area_counts['Property Count'] > 20]
print(areas_with_more_than_20)
df_b.count()
#visualizing the data
import matplotlib.pyplot as plt
import seaborn as sns

# Bar plot for areas with more than 20 properties
plt.figure(figsize=(10,6))
sns.barplot(x='Area', y='Property Count', data=areas_with_more_than_20)
plt.xticks(rotation=45, ha='right')
plt.title('Number of Properties by Area (More Than 20 Properties)')
plt.xlabel('Area')
plt.ylabel('Number of Properties')
plt.show()
# Count the number of properties in each area
area_counts = df_b['Area'].value_counts().reset_index()
area_counts.columns = ['Area', 'Property Count']

# areas with more than 20 properties (for this example, > 2 for demonstration)
filtered_areas = area_counts[area_counts['Property Count'] > 20]['Area']
# original DataFrame to include only rows where the area is in the filtered list
df_filtered = df_b[df_b['Area'].isin(filtered_areas)].reset_index(drop=True)

# new DataFrame with all columns and filtered areas
print(df_filtered)


#price per sqft vs total area
plt.figure(figsize=(10,6))
sns.scatterplot(x='Total_Area', y='Price_per_SQFT', hue='Area', data=df_filtered)
plt.title('Price per Square Foot vs. Total Area (Areas with More Than 20 Properties)')
plt.xlabel('Total Area (in SQFT)')
plt.ylabel('Price per Square Foot (₹)')
plt.legend(title='Area')
plt.show()

#Filter the properties with a balcony
df_with_balcony = df_filtered[df_filtered['Balcony'] == 'Yes'].reset_index(drop=True)

#56Filter the properties without a balcony
df_without_balcony = df_filtered[df_filtered['Balcony'] == 'No'].reset_index(drop=True)

# Display the DataFrames
print("Properties with Balcony:")
print(df_with_balcony)

print("\nProperties without Balcony:")
print(df_without_balcony)

#with balcony


#Property Title and Price columns
print("Property Title column:\n", df_with_balcony['Property Title'].head())
print("Price column:\n", df_with_balcony['Price'].head())

#extract BHK information
df_with_balcony['BHK'] = df_with_balcony['Property Title'].str.extract(r'(\d) BHK')
print("Extracted BHK information:\n", df_with_balcony[['Property Title', 'BHK']].head())

#Check how many rows have missing or invalid BHK values
missing_bhk_count = df_with_balcony['BHK'].isna().sum()
print(f"Number of missing BHK values: {missing_bhk_count}")

# Inspect the unique values in the Price column
print("\nUnique Price column values:")
print(df_with_balcony['Price'].unique())




# Inspect a sample of unique Price values (e.g., first 20 unique values)
print("Sample of unique Price values:\n")
print(df_with_balcony['Price'].unique()[:20])


import re

# Function to clean and convert the price values
def clean_price(price):
    # Remove ₹ symbol and commas
    price = re.sub(r'[₹,]', '', price)

    # Handle prices in Crore (Cr) format
    if 'Cr' in price:
        price = re.sub(r'Cr', '', price)  # Remove 'Cr'
        try:
            return float(price) * 1e7  # Convert to Crores (1 Cr = 10 million)
        except ValueError:
            return None

    # Handle prices in Lakh (L) format
    elif 'L' in price:
        price = re.sub(r'L', '', price)  # Remove 'L'
        try:
            return float(price) * 1e5  # Convert to Lakhs (1 L = 100,000)
        except ValueError:
            return None

    # Handle other numeric values (fallback)
    try:
        return float(price)
    except ValueError:
        return None

# Apply the cleaning function to the Price column
df_with_balcony['Price_numeric'] = df_with_balcony['Price'].apply(clean_price)

# Inspect the cleaned Price column
print("\nCleaned Price column (numeric):")
print(df_with_balcony[['Price', 'Price_numeric']].head())

# Step 4: Drop rows where Price_numeric is NaN
df_cleaned = df_with_balcony.dropna(subset=['Price_numeric'])

# Inspect the final cleaned DataFrame
print("\nFinal cleaned DataFrame (after dropping NaN values):")
print(df_cleaned[['Property Title', 'Price_numeric']].head())




# Check if the cleaned DataFrame is populated
if df_cleaned.empty:
    print("\nThe cleaned DataFrame is empty.")
else:
    print("\nThe cleaned DataFrame is populated.")
    print(df_cleaned[['Property Title', 'BHK', 'Price_numeric']].head())



# Convert prices to millions (INR)
df_cleaned['Price_in_millions'] = df_cleaned['Price_numeric'] / 1e6

# Inspect the result
print(df_cleaned[['Property Title', 'Price_numeric', 'Price_in_millions']].head())






import numpy as np
import matplotlib.pyplot as plt

# Ensure both 'BHK' and 'Price_numeric' are numeric and drop rows with NaN values
df_cleaned['BHK'] = pd.to_numeric(df_cleaned['BHK'], errors='coerce')
df_cleaned['Price_numeric'] = pd.to_numeric(df_cleaned['Price_numeric'], errors='coerce')

# Drop rows where either BHK or Price_numeric are NaN
df_cleaned = df_cleaned.dropna(subset=['BHK', 'Price_numeric'])

# Convert prices into 'millions' (divide by 1,000,000)
df_cleaned['Price_in_millions'] = df_cleaned['Price_numeric'] / 1e6

# Plot the scatter plot with BHK on the x-axis and price in millions on the y-axis
plt.scatter(df_cleaned['BHK'], df_cleaned['Price_in_millions'], color='b', alpha=0.5)

# Add labels and title
plt.xlabel('Number of Bedrooms (BHK)')
plt.ylabel('Price (in Millions)')
plt.title('Scatter Plot: BHK vs. Price in Millions')

# Show the plot
plt.show()

# Filter the DataFrame for only 1, 2, and 3 BHK properties
df_filtered = df_cleaned[df_cleaned['BHK'].isin([1, 2, 3])]

# Plot the scatter plot for only 1, 2, and 3 BHKs
plt.scatter(df_filtered['BHK'], df_filtered['Price_in_millions'], color='b', alpha=0.5)

# Add labels and title
plt.xlabel('Number of Bedrooms (BHK)')
plt.ylabel('Price (in Millions)')
plt.title('Scatter Plot: 1, 2, and 3 BHK vs. Price in Millions')

# Show the plot
plt.show()

#without balcony

#Check the columns in df_without_balcony
print(df_without_balcony.columns)


#Property Title and Price columns
print("Property Title column:\n", df_without_balcony['Property Title'].head())
print("Price column:\n", df_without_balcony['Price'].head())

#extract BHK information
df_without_balcony['BHK'] = df_without_balcony['Property Title'].str.extract(r'(\d) BHK')
print("Extracted BHK information:\n", df_without_balcony[['Property Title', 'BHK']].head())

#Check how many rows have missing or invalid BHK values
missing_bhk_count = df_with_balcony['BHK'].isna().sum()
print(f"Number of missing BHK values: {missing_bhk_count}")




# Inspect the unique values in the Price column
print("\nUnique Price column values:")
print(df_without_balcony['Price'].unique())

# Inspect a sample of unique Price values (e.g., first 20 unique values)
print("Sample of unique Price values:\n")
print(df_without_balcony['Price'].unique()[:20])

import re

# Function to clean and convert the price values
def clean_price(price):
    # Remove ₹ symbol and commas
    price = re.sub(r'[₹,]', '', price)

    # Handle prices in Crore (Cr) format
    if 'Cr' in price:
        price = re.sub(r'Cr', '', price)  # Remove 'Cr'
        try:
            return float(price) * 1e7  # Convert to Crores (1 Cr = 10 million)
        except ValueError:
            return None

    # Handle prices in Lakh (L) format
    elif 'L' in price:
        price = re.sub(r'L', '', price)  # Remove 'L'
        try:
            return float(price) * 1e5  # Convert to Lakhs (1 L = 100,000)
        except ValueError:
            return None

    # Handle other numeric values (fallback)
    try:
        return float(price)
    except ValueError:
        return None

# Apply the cleaning function to the Price column
df_without_balcony['Price_numeric'] = df_without_balcony['Price'].apply(clean_price)

# Inspect the cleaned Price column
print("\nCleaned Price column (numeric):")
print(df_without_balcony[['Price', 'Price_numeric']].head())

# Step 4: Drop rows where Price_numeric is NaN
df_cleaned = df_without_balcony.dropna(subset=['Price_numeric'])

# Inspect the final cleaned DataFrame
print("\nFinal cleaned DataFrame (after dropping NaN values):")
print(df_cleaned[['Property Title', 'Price_numeric']].head())

# Check if the cleaned DataFrame is populated
if df_cleaned.empty:
    print("\nThe cleaned DataFrame is empty.")
else:
    print("\nThe cleaned DataFrame is populated.")
    print(df_cleaned[['Property Title', 'BHK', 'Price_numeric']].head())

# Convert prices to millions (INR)
df_cleaned['Price_in_millions'] = df_cleaned['Price_numeric'] / 1e6

# Inspect the result
print(df_cleaned[['Property Title', 'Price_numeric', 'Price_in_millions']].head())

import numpy as np
import matplotlib.pyplot as plt

# Ensure both 'BHK' and 'Price_numeric' are numeric and drop rows with NaN values
df_cleaned['BHK'] = pd.to_numeric(df_cleaned['BHK'], errors='coerce')
df_cleaned['Price_numeric'] = pd.to_numeric(df_cleaned['Price_numeric'], errors='coerce')

# Drop rows where either BHK or Price_numeric are NaN
df_cleaned = df_cleaned.dropna(subset=['BHK', 'Price_numeric'])

# Convert prices into 'millions' (divide by 1,000,000)
df_cleaned['Price_in_millions'] = df_cleaned['Price_numeric'] / 1e6

# Plot the scatter plot with BHK on the x-axis and price in millions on the y-axis
plt.scatter(df_cleaned['BHK'], df_cleaned['Price_in_millions'], color='b', alpha=0.5)

# Add labels and title
plt.xlabel('Number of Bedrooms (BHK)')
plt.ylabel('Price (in Millions)')
plt.title('Scatter Plot: BHK vs. Price in Millions (Without Balcony)')

# Show the plot
plt.show()